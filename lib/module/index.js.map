{"version":3,"names":["DeviceEventEmitter","NativeEventEmitter","NativeModules","Platform","LINKING_ERROR","select","ios","default","RnAudio","Proxy","get","Error","AudioSourceAndroidType","OutputFormatAndroidType","AudioEncoderAndroidType","AVEncodingOption","AVModeIOSOption","AVEncoderAudioQualityIOSType","AVLinearPCMBitDepthKeyIOSType","EventId","StopCode","ilog","console","log","wlog","warn","elog","error","pad","num","slice","Audio","constructor","secs","minutes","Math","floor","milisecs","seconds","miliseconds","callback","OS","_recorderSubscription","addListener","RECORDBACK","myModuleEvt","remove","augmentedCallback","stoppageMeta","removeRecordBackListener","removeStoppageListener","_isRecording","_stoppageSubscription","STOPPAGE","_playerCallback","audioSet","uri","meteringEnabled","maxRecordingDurationSec","recordingCallback","stoppageCallback","_hasPausedRecord","addRecordBackListener","addStoppageListener","startRecorder","pauseRecorder","resumeRecorder","stopRecorder","event","currentPosition","duration","stopPlayer","httpHeaders","playbackCallback","playbackVolume","addPlayBackListener","removePlayBackListener","_playerSubscription","PLAYBACK","playerCallback","_isPlaying","_hasPaused","startPlayer","pausePlayer","resumePlayer","time","seekToPlayer","sec","setSubscriptionDuration","requestedWavParams","path","startWavRecorder","pauseWavRecorder","resumeWavRecorder","res","stopWavRecorder","a","b","multiply"],"sources":["index.tsx"],"sourcesContent":["import {\n  DeviceEventEmitter,\n  EmitterSubscription,\n  NativeEventEmitter,\n  NativeModules,\n  Platform,\n} from 'react-native'\n\nconst LINKING_ERROR =\n  `The package 'rn-audio' doesn't seem to be linked. Make sure: \\n\\n` +\n  Platform.select({ ios: \"- You have run 'pod install'\\n\", default: '' }) +\n  '- You rebuilt the app after installing the package\\n' +\n  '- You are not using Expo managed workflow\\n';\n\nconst RnAudio = NativeModules.RnAudio ? NativeModules.RnAudio : new Proxy(\n    {},\n    {\n      get() {\n        throw new Error(LINKING_ERROR);\n      },\n    }\n  );\n\nexport enum AudioSourceAndroidType {\n  DEFAULT = 0,\n  MIC,\n  VOICE_UPLINK,\n  VOICE_DOWNLINK,\n  VOICE_CALL,\n  CAMCORDER,\n  VOICE_RECOGNITION,\n  VOICE_COMMUNICATION,\n  REMOTE_SUBMIX,\n  UNPROCESSED,\n  RADIO_TUNER = 1998,\n  HOTWORD,\n}\n\nexport enum OutputFormatAndroidType {\n  DEFAULT = 0,\n  THREE_GPP,\n  MPEG_4,\n  AMR_NB,\n  AMR_WB,\n  AAC_ADIF,\n  AAC_ADTS,\n  OUTPUT_FORMAT_RTP_AVP,\n  MPEG_2_TS,\n  WEBM,\n}\n\nexport enum AudioEncoderAndroidType {\n  DEFAULT = 0,\n  AMR_NB,\n  AMR_WB,\n  AAC,\n  HE_AAC,\n  AAC_ELD,\n  VORBIS,\n}\n\nexport enum AVEncodingOption {\n  lpcm = 'lpcm',\n  ima4 = 'ima4',\n  aac = 'aac',\n  MAC3 = 'MAC3',\n  MAC6 = 'MAC6',\n  ulaw = 'ulaw',\n  alaw = 'alaw',\n  mp1 = 'mp1',\n  mp2 = 'mp2',\n  mp4 = 'mp4',\n  alac = 'alac',\n  amr = 'amr',\n  flac = 'flac',\n  opus = 'opus',\n}\n\ntype AVEncodingType =\n  | AVEncodingOption.lpcm\n  | AVEncodingOption.ima4\n  | AVEncodingOption.aac\n  | AVEncodingOption.MAC3\n  | AVEncodingOption.MAC6\n  | AVEncodingOption.ulaw\n  | AVEncodingOption.alaw\n  | AVEncodingOption.mp1\n  | AVEncodingOption.mp2\n  | AVEncodingOption.mp4\n  | AVEncodingOption.alac\n  | AVEncodingOption.amr\n  | AVEncodingOption.flac\n  | AVEncodingOption.opus\n\nexport enum AVModeIOSOption {\n  gamechat = 'gamechat',\n  measurement = 'measurement',\n  movieplayback = 'movieplayback',\n  spokenaudio = 'spokenaudio',\n  videochat = 'videochat',\n  videorecording = 'videorecording',\n  voicechat = 'voicechat',\n  voiceprompt = 'voiceprompt',\n}\n\nexport type AVModeIOSType =\n  | AVModeIOSOption.gamechat\n  | AVModeIOSOption.measurement\n  | AVModeIOSOption.movieplayback\n  | AVModeIOSOption.spokenaudio\n  | AVModeIOSOption.videochat\n  | AVModeIOSOption.videorecording\n  | AVModeIOSOption.voicechat\n  | AVModeIOSOption.voiceprompt\n\nexport enum AVEncoderAudioQualityIOSType {\n  min = 0,\n  low = 32,\n  medium = 64,\n  high = 96,\n  max = 127,\n}\n\nexport enum AVLinearPCMBitDepthKeyIOSType {\n  'bit8' = 8,\n  'bit16' = 16,\n  'bit24' = 24,\n  'bit32' = 32,\n}\n\nexport interface AudioSet {\n  AVSampleRateKeyIOS?: number,\n  AVFormatIDKeyIOS?: AVEncodingType,\n  AVModeIOS?: AVModeIOSType,\n  AVNumberOfChannelsKeyIOS?: number,\n  AVEncoderAudioQualityKeyIOS?: AVEncoderAudioQualityIOSType,\n  AudioSourceAndroid?: AudioSourceAndroidType,\n  AVLinearPCMBitDepthKeyIOS?: AVLinearPCMBitDepthKeyIOSType,\n  AVLinearPCMIsBigEndianKeyIOS?: boolean,\n  AVLinearPCMIsFloatKeyIOS?: boolean,\n  AVLinearPCMIsNonInterleavedIOS?: boolean,\n  OutputFormatAndroid?: OutputFormatAndroidType,\n  AudioEncoderAndroid?: AudioEncoderAndroidType,\n  AudioEncodingBitRateAndroid?: number,\n  AudioSamplingRateAndroid?: number,\n}\n\nenum EventId {\n  RECORDBACK = \"rn-recordback\",\n  PLAYBACK = \"rn-playback\",\n  STOPPAGE = \"rn-stoppage\"\n}\n\nenum StopCode {\n  USER_REQUEST = \"user-request\",\n  MAX_RECORDING_DURATION_REACHED = \"max-recording-duration-reached\",\n  ERROR = \"error\",\n}\n\nexport type StoppageType = {\n  stopCode: StopCode,\n}\n\nexport type RecordBackType = {\n  isRecording?: boolean,\n  currentPosition: number,\n  currentMetering?: number,\n}\n\nexport type PlayBackType = {\n  isMuted?: boolean,\n  currentPosition: number,\n  duration: number,\n}\n\n\ninterface RequestedWavParams {\n  sampleRate: number,\n  numChannels: number,\n  byteDepth: number\n}\n\ninterface StartPlayerArgs {\n  uri?: string,\n  httpHeaders?: Record<string, string>,\n  playbackCallback?: (e: PlayBackType) => void\n  playbackVolume?: number \n}\n\ninterface StartRecorderArgs {\n  audioSet?: AudioSet,\n  uri?: string,\n  meteringEnabled?: boolean,\n  maxRecordingDurationSec?: number,\n  recordingCallback?: ((recordingMeta: RecordBackType) => void) | null\n  stoppageCallback?: ((stoppageMeta: StoppageType) => void) | null\n}\n\ninterface StartWavRecorderArgs {\n  requestedWavParams: RequestedWavParams,\n  path?: string,\n  meteringEnabled?: boolean,\n  maxRecordingDurationSec?: number,\n  recordingCallback?: ((recordingMeta: RecordBackType) => void) | null\n  stoppageCallback?: ((stoppageMeta: StoppageType) => void) | null\n}\n\nconst ilog = console.log\n// @ts-ignore\nconst wlog = console.warn\n// @ts-ignore\nconst elog = console.error\n\nconst pad = (num: number): string => {\n  return ('0' + num).slice(-2)\n}\n\nexport class Audio {\n\n  private _isRecording: boolean\n  private _isPlaying: boolean\n  private _hasPaused: boolean\n  private _hasPausedRecord: boolean\n  private _recorderSubscription: EmitterSubscription | null\n  private _playerSubscription: EmitterSubscription | null\n  private _stoppageSubscription: EmitterSubscription | null\n  private _playerCallback: ((event: PlayBackType) => void) | null\n\n  constructor() {\n    this._isRecording = false\n    this._isPlaying = false\n    this._hasPaused = false\n    this._hasPausedRecord = false\n    this._recorderSubscription = null\n    this._playerSubscription = null\n    this._stoppageSubscription = null\n    this._playerCallback = null\n  }\n\n  mmss = (secs: number): string => {\n    let minutes = Math.floor(secs / 60)\n\n    secs = secs % 60\n    minutes = minutes % 60\n\n    return pad(minutes) + ':' + pad(secs)\n  }\n\n  mmssss = (milisecs: number): string => {\n    const secs = Math.floor(milisecs / 1000)\n    const minutes = Math.floor(secs / 60)\n    const seconds = secs % 60\n    const miliseconds = Math.floor((milisecs % 1000) / 10)\n\n    return pad(minutes) + ':' + pad(seconds) + ':' + pad(miliseconds)\n  }\n\n  /**\n   * Set listener from native module for recorder.\n   * @param { (recordingMeta: RecordBackType) => void } callback parameter\n   * @returns { void }\n  */\n  private addRecordBackListener = (\n    callback: (recordingMeta: RecordBackType) => void,\n  ): void => {\n    if (Platform.OS === 'android') {\n      this._recorderSubscription = DeviceEventEmitter.addListener(\n        EventId.RECORDBACK,\n        callback,\n      )\n    } else {\n      const myModuleEvt = new NativeEventEmitter(RnAudio)\n      this._recorderSubscription = myModuleEvt.addListener(\n        EventId.RECORDBACK,\n        callback,\n      )\n    }\n  }\n\n  /**\n   * Remove listener for recorder.\n   * @returns {void}\n   */\n  private removeRecordBackListener = (): void => {\n    if (this._recorderSubscription) {\n      this._recorderSubscription.remove()\n      this._recorderSubscription = null\n    }\n  }\n\n  /**\n   * Set listener from native module for stoppage.\n   * @param { (stoppageMeta: StoppageType) => void } callback parameter. The callback MUST \n   * @returns { void }\n   */\n   private addStoppageListener = (\n    callback: ((stoppageMeta: StoppageType) => void) | null,\n  ): void => {\n\n    const augmentedCallback = (stoppageMeta: StoppageType) => {\n      this.removeRecordBackListener()\n      this.removeStoppageListener()\n      this._isRecording = false\n      if (callback) {\n        callback(stoppageMeta)\n      }\n    }\n\n    if (Platform.OS === 'android') {\n      this._stoppageSubscription = DeviceEventEmitter.addListener(\n        EventId.STOPPAGE,\n        augmentedCallback,\n      )\n    } else {\n      const myModuleEvt = new NativeEventEmitter(RnAudio)\n      this._stoppageSubscription = myModuleEvt.addListener(\n        EventId.STOPPAGE,\n        augmentedCallback,\n      )\n    }\n  }\n\n  /**\n   * Remove listener for recorder.\n   * @returns {void}\n   */\n  private removeStoppageListener = (): void => {\n    if (this._stoppageSubscription) {\n      this._stoppageSubscription.remove()\n      this._stoppageSubscription = null\n    }\n  }\n\n  /**\n   * Set listener from native module for player.\n   * @param {(playbackMeta: PlayBackType) => void} callback - Callback parameter\n   * @returns {void}\n   */\n  private addPlayBackListener = (\n    callback: (playbackMeta: PlayBackType) => void,\n  ): void => {\n    this._playerCallback = callback\n  }\n\n  /**\n   * remove listener for player.\n   * @returns {void}\n   */\n  private removePlayBackListener = (): void => {\n    this._playerCallback = null\n  }\n\n  /**\n   * Returns recording state\n   * @returns {Promise<boolean>}\n   */\n   isRecording = async (): Promise<boolean> => {\n    return this._isRecording\n  }\n\n  /**\n   * start recording with param.\n   * @param {StartRecorderArgs} startRecorder params.\n   * @returns {Promise<string>}\n   */\n  startRecorder = async ({\n    audioSet,\n    uri = 'DEFAULT',\n    meteringEnabled = false,\n    maxRecordingDurationSec = 4.0,\n    recordingCallback,\n    stoppageCallback = null\n  }:StartRecorderArgs): Promise<string> => {\n\n    ilog('index.startRecorder()')\n\n    if (!this._isRecording) {\n      this._isRecording = true\n      this._hasPausedRecord = false\n\n      if (recordingCallback) {\n        ilog('   calling index.addRecordBackListener()')\n        this.addRecordBackListener(recordingCallback)\n      }\n\n      ilog('   calling index.addStoppageListener()')\n      //MUST add stoppage listener, even if its null\n      this.addStoppageListener(stoppageCallback)\n   \n      ilog('   calling RNWRP.startRecorder()')\n      return RnAudio.startRecorder(\n        audioSet,\n        uri,\n        meteringEnabled,\n        maxRecordingDurationSec\n      )\n    }\n\n    return 'startRecorder: Already recording.'\n  }\n\n  /**\n   * Pause recording.\n   * @returns {Promise<string>}\n   */\n  pauseRecorder = async (): Promise<string> => {\n    ilog('index.pauseRecorder()')\n\n    if (this._isRecording && !this._hasPausedRecord) {\n      this._hasPausedRecord = true\n\n      ilog('   calling RNWRP.pauseRecorder()')\n      return RnAudio.pauseRecorder()\n    }\n\n    return 'pauseRecorder: ' + (!this._isRecording ? 'Wasn\\'t recording.' : 'Already paused.')\n  }\n\n  /**\n   * Resume recording.\n   * @returns {Promise<string>}\n   */\n  resumeRecorder = async (): Promise<string> => {\n    ilog('index.resumeRecorder()')\n    if (this._isRecording && this._hasPausedRecord) {\n      this._hasPausedRecord = false\n\n      ilog('   Calling RNWRP.removeRecordBackListener()')\n      return RnAudio.resumeRecorder()\n    }\n\n    return 'resumeRecorder: ' + (!this._isRecording ? 'Wasn\\'t recording.' : 'Wasn\\'t paused.')\n  }\n\n  /**\n   * stop recording.\n   * @returns {Promise<string>}\n   */\n  stopRecorder = async (): Promise<string> => {\n    ilog('index.stopRecorder()')\n    if (this._isRecording) {\n      this._isRecording = false\n      this._hasPausedRecord = false\n\n      ilog('   Calling index.removeRecordBackListener()')\n      this.removeRecordBackListener()\n\n      ilog('   Calling index.removeStoppageListener()')\n      this.removeStoppageListener()\n\n      ilog('   Calling RNWRP.stopRecorder()')\n      return RnAudio.stopRecorder()\n    }\n\n    return 'stopRecorder: Wasn\\'t recording (or was called twice).'\n  }\n\n  playerCallback = (event: PlayBackType): void => {\n    if (this._playerCallback) {\n      this._playerCallback(event)\n    }\n\n    if (event.currentPosition === event.duration) {\n      this.stopPlayer()\n    }\n  }\n\n  /**\n   * Start playing with param.\n   * @param {StartPlayerArgs} startPlayerArgs params.\n   * @param {Record<string, string>} httpHeaders Set of http headers.\n   * @returns {Promise<string>}\n   */\n  startPlayer = async ({\n    uri = 'DEFAULT',\n    httpHeaders,\n    playbackCallback,\n    playbackVolume = 1.0\n  }:StartPlayerArgs): Promise<string> => {\n\n    ilog('index.startPlayer()')\n\n    if (playbackCallback) {\n      ilog('   Calling index.addPlayBackListener()')\n      this.addPlayBackListener(playbackCallback)\n    }\n    else {\n      ilog('   Calling index.removePlayBackListener()')\n      this.removePlayBackListener()\n    }\n\n    if (!this._playerSubscription) {\n\n      ilog('   adding callback.')\n\n      if (Platform.OS === 'android') {\n        this._playerSubscription = DeviceEventEmitter.addListener(\n          EventId.PLAYBACK,\n          this.playerCallback,\n        )\n      } \n      else {\n        const myModuleEvt = new NativeEventEmitter(RnAudio)\n        this._playerSubscription = myModuleEvt.addListener(\n          EventId.PLAYBACK,\n          this.playerCallback,\n        )\n      }\n    }\n\n    if (!this._isPlaying || this._hasPaused) {\n      this._isPlaying = true\n      this._hasPaused = false\n\n      ilog('   Calling RNWRP.startPlayer()')\n\n      return RnAudio.startPlayer(uri, httpHeaders, playbackVolume)  \n    }\n\n    return 'startPlayer: Already playing, or not paused'\n  }\n\n  /**\n   * Pause playing.\n   * @returns {Promise<string>}\n   */\n  pausePlayer = async (): Promise<string> => {\n    ilog('index.pausePlayer()')\n    if (!this._isPlaying) {\n      return 'pausePlayer: No audio playing to pause'\n    }\n\n    if (!this._hasPaused) {\n      this._hasPaused = true\n      ilog('   calling rnwrp.pausePlayer()')\n      return RnAudio.pausePlayer()\n    }\n\n    return 'pausePlayer: Audio already paused'\n  }\n\n  /**\n   * Resume playing.\n   * @returns {Promise<string>}\n   */\n  resumePlayer = async (): Promise<string> => {\n    ilog('index.pausePlayer()')\n\n    if (!this._isPlaying) {\n      return 'resumePlayer: No audio playing to resume'\n    }\n\n    if (this._hasPaused) {\n      this._hasPaused = false\n\n      ilog('index.pausePlayer()')\n      return RnAudio.resumePlayer()\n    }\n\n    return 'resumePlayer: Audio already playing'\n  }\n\n  /**\n   * Stop playing.\n   * @returns {Promise<string>}\n   */\n  stopPlayer = async (): Promise<string> => {\n    ilog('index.stopPlayer()')\n    if (this._isPlaying) {\n      this._isPlaying = false\n      this._hasPaused = false\n\n      ilog('   calling index.removePlayBackListener()')\n      this.removePlayBackListener()\n\n      ilog('   calling rnwrp.stopPlayer()')\n      return RnAudio.stopPlayer()\n    }\n\n    return 'stopPlayer: Already stopped playback'\n  }\n\n  /**\n   * Seek to a particular time in a recording. Doesn't currently\n   * work when playback is stopped; only when playing or paused.\n   * @param {number} time position seek to in millisecond.\n   * @returns {Promise<string>}\n   */\n  seekToPlayer = async (time: number): Promise<string> => {\n    ilog('index.seekToPlayer()')\n    ilog('   calling rnwrp.seekToPlayer()')\n    return RnAudio.seekToPlayer(time)\n  }\n\n  /**\n   * Sets playback volume.\n   * Android:\n   *  * MediaPlayer must exist before calling this! Consider using startPlayer's playbackVolume parameter instead\n   *  * relative to 100% of Media Volume\n   * @param {number} volume New volume (% of Media Volume) for pre-existing media player \n   * @returns {Promise<string>}\n   */\n  // private setVolume = async (volume: number): Promise<string> => {\n  //   ilog('index.setVolume()')\n  //   if (volume < 0 || volume > 1) {\n  //     throw new Error('Value of volume should be between 0.0 to 1.0')\n  //   }\n  //   ilog('   calling rnwrp.setVolume()')\n  //   return RnAudio.setVolume(volume)\n  // }\n\n  /**\n   * Set subscription duration. Default is 0.5.\n   * @param {number} sec subscription callback duration in seconds.\n   * @returns {Promise<string>}\n   */\n  setSubscriptionDuration = async (sec: number): Promise<string> => {\n    ilog('index.setSubscriptionDuration()')\n    return RnAudio.setSubscriptionDuration(sec)\n  }\n\n  /**\n   * startWavRecorder\n   * @param {StartWavRecorderArgs} startWavRecordArgs\n   * @returns {Promise<string>}\n   */\n  startWavRecorder = async ({\n    requestedWavParams,\n    path = 'DEFAULT',\n    meteringEnabled = false,\n    maxRecordingDurationSec = 4.0,\n    recordingCallback,\n    stoppageCallback = null\n  }:StartWavRecorderArgs): Promise<string> => {\n    ilog('index.startWavRecorder()')\n    if (!this._isRecording) {\n\n      this._isRecording = true\n      this._hasPausedRecord = false\n\n      if (recordingCallback) {\n        ilog('   calling index.addRecordBackListener()')\n        this.addRecordBackListener(recordingCallback)\n      }\n\n      ilog('   calling index.addStoppageListener()')\n      //Must add stoppage listener; even if its null\n      this.addStoppageListener(stoppageCallback)\n\n      ilog('   calling rnwrp.startWavRecorder()')\n      return RnAudio.startWavRecorder(\n        requestedWavParams,\n        path,\n        meteringEnabled,\n        maxRecordingDurationSec\n      )\n    }\n\n    return 'startWavRecorder: Already recording' + (this._hasPausedRecord ? '; currently paused.' : '.')\n  }\n\n  /**\n   * Pause wav recording.\n   * @returns {Promise<string>}\n   */\n   pauseWavRecorder = async (): Promise<string> => {\n    ilog('index.pauseWavRecorder()')\n    ilog('   isRecording:', this._isRecording)\n    ilog('   isPaused:', this._isRecording)\n    if (this._isRecording && !this._hasPausedRecord) {\n      this._hasPausedRecord = true\n      ilog('   calling rnwrp.pauseWavRecorder()')\n      return RnAudio.pauseWavRecorder()\n    }\n\n    return 'pauseWavRecorder: ' + (!this._isRecording ? 'Wasn\\'t recording.' : 'Already paused.')\n  }\n\n  /**\n   * Resume wav recording.\n   * @returns {Promise<string>}\n   */\n  resumeWavRecorder = async (): Promise<string> => {\n    ilog('index.resumeWavRecorder()')\n    if (this._isRecording && this._hasPausedRecord) {\n      this._hasPausedRecord = false\n      ilog('   calling rnwrp.resumeWavRecorder()')\n      return RnAudio.resumeWavRecorder()\n    }\n\n    return 'resumeWavRecorder: ' + (!this._isRecording ? 'Wasn\\'t recording.' : 'Wasn\\'t paused.')\n  }\n\n  /**\n   * stopWavRecorder\n   * @returns {Promise<string>}\n   */\n  stopWavRecorder = async (): Promise<string> => {\n    ilog('index.stopWavRecorder()')\n    if (this._isRecording) {\n\n      this._isRecording = false\n      this._hasPausedRecord = false\n\n      ilog('   calling index.removeRecordBackListener()')\n      this.removeRecordBackListener()\n\n      ilog('   calling index.removeStoppageListener()')\n      this.removeStoppageListener()\n\n      ilog('   calling rnwrp.stopWavRecorder()')\n      const res = RnAudio.stopWavRecorder()\n      return res\n    }\n\n    return 'stopWavRecorder: Wasn\\'t recording (or was called multiple times).'\n  }\n\n\n\n  // ****\n  multiply = async (a: number, b: number): Promise<number> => {\n    return RnAudio.multiply(a, b);\n  }\n\n}\n\n\n\n\n"],"mappings":";;AAAA,SACEA,kBADF,EAGEC,kBAHF,EAIEC,aAJF,EAKEC,QALF,QAMO,cANP;AAQA,MAAMC,aAAa,GAChB,mEAAD,GACAD,QAAQ,CAACE,MAAT,CAAgB;EAAEC,GAAG,EAAE,gCAAP;EAAyCC,OAAO,EAAE;AAAlD,CAAhB,CADA,GAEA,sDAFA,GAGA,6CAJF;AAMA,MAAMC,OAAO,GAAGN,aAAa,CAACM,OAAd,GAAwBN,aAAa,CAACM,OAAtC,GAAgD,IAAIC,KAAJ,CAC5D,EAD4D,EAE5D;EACEC,GAAG,GAAG;IACJ,MAAM,IAAIC,KAAJ,CAAUP,aAAV,CAAN;EACD;;AAHH,CAF4D,CAAhE;AASA,WAAYQ,sBAAZ;;WAAYA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;EAAAA,sB,CAAAA,sB;GAAAA,sB,KAAAA,sB;;AAeZ,WAAYC,uBAAZ;;WAAYA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;GAAAA,uB,KAAAA,uB;;AAaZ,WAAYC,uBAAZ;;WAAYA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;EAAAA,uB,CAAAA,uB;GAAAA,uB,KAAAA,uB;;AAUZ,WAAYC,gBAAZ;;WAAYA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAiCZ,WAAYC,eAAZ;;WAAYA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;EAAAA,e;GAAAA,e,KAAAA,e;;AAqBZ,WAAYC,4BAAZ;;WAAYA,4B;EAAAA,4B,CAAAA,4B;EAAAA,4B,CAAAA,4B;EAAAA,4B,CAAAA,4B;EAAAA,4B,CAAAA,4B;EAAAA,4B,CAAAA,4B;GAAAA,4B,KAAAA,4B;;AAQZ,WAAYC,6BAAZ;;WAAYA,6B;EAAAA,6B,CAAAA,6B;EAAAA,6B,CAAAA,6B;EAAAA,6B,CAAAA,6B;EAAAA,6B,CAAAA,6B;GAAAA,6B,KAAAA,6B;;IAwBPC,O;;WAAAA,O;EAAAA,O;EAAAA,O;EAAAA,O;GAAAA,O,KAAAA,O;;IAMAC,Q;;WAAAA,Q;EAAAA,Q;EAAAA,Q;EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAsDL,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAArB,C,CACA;;AACA,MAAMC,IAAI,GAAGF,OAAO,CAACG,IAArB,C,CACA;;AACA,MAAMC,IAAI,GAAGJ,OAAO,CAACK,KAArB;;AAEA,MAAMC,GAAG,GAAIC,GAAD,IAAyB;EACnC,OAAO,CAAC,MAAMA,GAAP,EAAYC,KAAZ,CAAkB,CAAC,CAAnB,CAAP;AACD,CAFD;;AAIA,OAAO,MAAMC,KAAN,CAAY;EAWjBC,WAAW,GAAG;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA,8BAWNC,IAAD,IAA0B;MAC/B,IAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAd;MAEAA,IAAI,GAAGA,IAAI,GAAG,EAAd;MACAC,OAAO,GAAGA,OAAO,GAAG,EAApB;MAEA,OAAON,GAAG,CAACM,OAAD,CAAH,GAAe,GAAf,GAAqBN,GAAG,CAACK,IAAD,CAA/B;IACD,CAlBa;;IAAA,gCAoBJI,QAAD,IAA8B;MACrC,MAAMJ,IAAI,GAAGE,IAAI,CAACC,KAAL,CAAWC,QAAQ,GAAG,IAAtB,CAAb;MACA,MAAMH,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAhB;MACA,MAAMK,OAAO,GAAGL,IAAI,GAAG,EAAvB;MACA,MAAMM,WAAW,GAAGJ,IAAI,CAACC,KAAL,CAAYC,QAAQ,GAAG,IAAZ,GAAoB,EAA/B,CAApB;MAEA,OAAOT,GAAG,CAACM,OAAD,CAAH,GAAe,GAAf,GAAqBN,GAAG,CAACU,OAAD,CAAxB,GAAoC,GAApC,GAA0CV,GAAG,CAACW,WAAD,CAApD;IACD,CA3Ba;;IAAA,+CAmCZC,QAD8B,IAErB;MACT,IAAIrC,QAAQ,CAACsC,EAAT,KAAgB,SAApB,EAA+B;QAC7B,KAAKC,qBAAL,GAA6B1C,kBAAkB,CAAC2C,WAAnB,CAC3BxB,OAAO,CAACyB,UADmB,EAE3BJ,QAF2B,CAA7B;MAID,CALD,MAKO;QACL,MAAMK,WAAW,GAAG,IAAI5C,kBAAJ,CAAuBO,OAAvB,CAApB;QACA,KAAKkC,qBAAL,GAA6BG,WAAW,CAACF,WAAZ,CAC3BxB,OAAO,CAACyB,UADmB,EAE3BJ,QAF2B,CAA7B;MAID;IACF,CAjDa;;IAAA,kDAuDqB,MAAY;MAC7C,IAAI,KAAKE,qBAAT,EAAgC;QAC9B,KAAKA,qBAAL,CAA2BI,MAA3B;;QACA,KAAKJ,qBAAL,GAA6B,IAA7B;MACD;IACF,CA5Da;;IAAA,6CAoEZF,QAD6B,IAEpB;MAET,MAAMO,iBAAiB,GAAIC,YAAD,IAAgC;QACxD,KAAKC,wBAAL;QACA,KAAKC,sBAAL;QACA,KAAKC,YAAL,GAAoB,KAApB;;QACA,IAAIX,QAAJ,EAAc;UACZA,QAAQ,CAACQ,YAAD,CAAR;QACD;MACF,CAPD;;MASA,IAAI7C,QAAQ,CAACsC,EAAT,KAAgB,SAApB,EAA+B;QAC7B,KAAKW,qBAAL,GAA6BpD,kBAAkB,CAAC2C,WAAnB,CAC3BxB,OAAO,CAACkC,QADmB,EAE3BN,iBAF2B,CAA7B;MAID,CALD,MAKO;QACL,MAAMF,WAAW,GAAG,IAAI5C,kBAAJ,CAAuBO,OAAvB,CAApB;QACA,KAAK4C,qBAAL,GAA6BP,WAAW,CAACF,WAAZ,CAC3BxB,OAAO,CAACkC,QADmB,EAE3BN,iBAF2B,CAA7B;MAID;IACF,CA5Fa;;IAAA,gDAkGmB,MAAY;MAC3C,IAAI,KAAKK,qBAAT,EAAgC;QAC9B,KAAKA,qBAAL,CAA2BN,MAA3B;;QACA,KAAKM,qBAAL,GAA6B,IAA7B;MACD;IACF,CAvGa;;IAAA,6CA+GZZ,QAD4B,IAEnB;MACT,KAAKc,eAAL,GAAuBd,QAAvB;IACD,CAlHa;;IAAA,gDAwHmB,MAAY;MAC3C,KAAKc,eAAL,GAAuB,IAAvB;IACD,CA1Ha;;IAAA,qCAgIC,YAA8B;MAC3C,OAAO,KAAKH,YAAZ;IACD,CAlIa;;IAAA,uCAyIE,cAOyB;MAAA,IAPlB;QACrBI,QADqB;QAErBC,GAAG,GAAG,SAFe;QAGrBC,eAAe,GAAG,KAHG;QAIrBC,uBAAuB,GAAG,GAJL;QAKrBC,iBALqB;QAMrBC,gBAAgB,GAAG;MANE,CAOkB;MAEvCvC,IAAI,CAAC,uBAAD,CAAJ;;MAEA,IAAI,CAAC,KAAK8B,YAAV,EAAwB;QACtB,KAAKA,YAAL,GAAoB,IAApB;QACA,KAAKU,gBAAL,GAAwB,KAAxB;;QAEA,IAAIF,iBAAJ,EAAuB;UACrBtC,IAAI,CAAC,0CAAD,CAAJ;UACA,KAAKyC,qBAAL,CAA2BH,iBAA3B;QACD;;QAEDtC,IAAI,CAAC,wCAAD,CAAJ,CATsB,CAUtB;;QACA,KAAK0C,mBAAL,CAAyBH,gBAAzB;QAEAvC,IAAI,CAAC,kCAAD,CAAJ;QACA,OAAOb,OAAO,CAACwD,aAAR,CACLT,QADK,EAELC,GAFK,EAGLC,eAHK,EAILC,uBAJK,CAAP;MAMD;;MAED,OAAO,mCAAP;IACD,CA3Ka;;IAAA,uCAiLE,YAA6B;MAC3CrC,IAAI,CAAC,uBAAD,CAAJ;;MAEA,IAAI,KAAK8B,YAAL,IAAqB,CAAC,KAAKU,gBAA/B,EAAiD;QAC/C,KAAKA,gBAAL,GAAwB,IAAxB;QAEAxC,IAAI,CAAC,kCAAD,CAAJ;QACA,OAAOb,OAAO,CAACyD,aAAR,EAAP;MACD;;MAED,OAAO,qBAAqB,CAAC,KAAKd,YAAN,GAAqB,oBAArB,GAA4C,iBAAjE,CAAP;IACD,CA5La;;IAAA,wCAkMG,YAA6B;MAC5C9B,IAAI,CAAC,wBAAD,CAAJ;;MACA,IAAI,KAAK8B,YAAL,IAAqB,KAAKU,gBAA9B,EAAgD;QAC9C,KAAKA,gBAAL,GAAwB,KAAxB;QAEAxC,IAAI,CAAC,6CAAD,CAAJ;QACA,OAAOb,OAAO,CAAC0D,cAAR,EAAP;MACD;;MAED,OAAO,sBAAsB,CAAC,KAAKf,YAAN,GAAqB,oBAArB,GAA4C,iBAAlE,CAAP;IACD,CA5Ma;;IAAA,sCAkNC,YAA6B;MAC1C9B,IAAI,CAAC,sBAAD,CAAJ;;MACA,IAAI,KAAK8B,YAAT,EAAuB;QACrB,KAAKA,YAAL,GAAoB,KAApB;QACA,KAAKU,gBAAL,GAAwB,KAAxB;QAEAxC,IAAI,CAAC,6CAAD,CAAJ;QACA,KAAK4B,wBAAL;QAEA5B,IAAI,CAAC,2CAAD,CAAJ;QACA,KAAK6B,sBAAL;QAEA7B,IAAI,CAAC,iCAAD,CAAJ;QACA,OAAOb,OAAO,CAAC2D,YAAR,EAAP;MACD;;MAED,OAAO,wDAAP;IACD,CAnOa;;IAAA,wCAqOIC,KAAD,IAA+B;MAC9C,IAAI,KAAKd,eAAT,EAA0B;QACxB,KAAKA,eAAL,CAAqBc,KAArB;MACD;;MAED,IAAIA,KAAK,CAACC,eAAN,KAA0BD,KAAK,CAACE,QAApC,EAA8C;QAC5C,KAAKC,UAAL;MACD;IACF,CA7Oa;;IAAA,qCAqPA,eAKyB;MAAA,IALlB;QACnBf,GAAG,GAAG,SADa;QAEnBgB,WAFmB;QAGnBC,gBAHmB;QAInBC,cAAc,GAAG;MAJE,CAKkB;MAErCrD,IAAI,CAAC,qBAAD,CAAJ;;MAEA,IAAIoD,gBAAJ,EAAsB;QACpBpD,IAAI,CAAC,wCAAD,CAAJ;QACA,KAAKsD,mBAAL,CAAyBF,gBAAzB;MACD,CAHD,MAIK;QACHpD,IAAI,CAAC,2CAAD,CAAJ;QACA,KAAKuD,sBAAL;MACD;;MAED,IAAI,CAAC,KAAKC,mBAAV,EAA+B;QAE7BxD,IAAI,CAAC,qBAAD,CAAJ;;QAEA,IAAIlB,QAAQ,CAACsC,EAAT,KAAgB,SAApB,EAA+B;UAC7B,KAAKoC,mBAAL,GAA2B7E,kBAAkB,CAAC2C,WAAnB,CACzBxB,OAAO,CAAC2D,QADiB,EAEzB,KAAKC,cAFoB,CAA3B;QAID,CALD,MAMK;UACH,MAAMlC,WAAW,GAAG,IAAI5C,kBAAJ,CAAuBO,OAAvB,CAApB;UACA,KAAKqE,mBAAL,GAA2BhC,WAAW,CAACF,WAAZ,CACzBxB,OAAO,CAAC2D,QADiB,EAEzB,KAAKC,cAFoB,CAA3B;QAID;MACF;;MAED,IAAI,CAAC,KAAKC,UAAN,IAAoB,KAAKC,UAA7B,EAAyC;QACvC,KAAKD,UAAL,GAAkB,IAAlB;QACA,KAAKC,UAAL,GAAkB,KAAlB;QAEA5D,IAAI,CAAC,gCAAD,CAAJ;QAEA,OAAOb,OAAO,CAAC0E,WAAR,CAAoB1B,GAApB,EAAyBgB,WAAzB,EAAsCE,cAAtC,CAAP;MACD;;MAED,OAAO,6CAAP;IACD,CApSa;;IAAA,qCA0SA,YAA6B;MACzCrD,IAAI,CAAC,qBAAD,CAAJ;;MACA,IAAI,CAAC,KAAK2D,UAAV,EAAsB;QACpB,OAAO,wCAAP;MACD;;MAED,IAAI,CAAC,KAAKC,UAAV,EAAsB;QACpB,KAAKA,UAAL,GAAkB,IAAlB;QACA5D,IAAI,CAAC,gCAAD,CAAJ;QACA,OAAOb,OAAO,CAAC2E,WAAR,EAAP;MACD;;MAED,OAAO,mCAAP;IACD,CAvTa;;IAAA,sCA6TC,YAA6B;MAC1C9D,IAAI,CAAC,qBAAD,CAAJ;;MAEA,IAAI,CAAC,KAAK2D,UAAV,EAAsB;QACpB,OAAO,0CAAP;MACD;;MAED,IAAI,KAAKC,UAAT,EAAqB;QACnB,KAAKA,UAAL,GAAkB,KAAlB;QAEA5D,IAAI,CAAC,qBAAD,CAAJ;QACA,OAAOb,OAAO,CAAC4E,YAAR,EAAP;MACD;;MAED,OAAO,qCAAP;IACD,CA5Ua;;IAAA,oCAkVD,YAA6B;MACxC/D,IAAI,CAAC,oBAAD,CAAJ;;MACA,IAAI,KAAK2D,UAAT,EAAqB;QACnB,KAAKA,UAAL,GAAkB,KAAlB;QACA,KAAKC,UAAL,GAAkB,KAAlB;QAEA5D,IAAI,CAAC,2CAAD,CAAJ;QACA,KAAKuD,sBAAL;QAEAvD,IAAI,CAAC,+BAAD,CAAJ;QACA,OAAOb,OAAO,CAAC+D,UAAR,EAAP;MACD;;MAED,OAAO,sCAAP;IACD,CAhWa;;IAAA,sCAwWC,MAAOc,IAAP,IAAyC;MACtDhE,IAAI,CAAC,sBAAD,CAAJ;MACAA,IAAI,CAAC,iCAAD,CAAJ;MACA,OAAOb,OAAO,CAAC8E,YAAR,CAAqBD,IAArB,CAAP;IACD,CA5Wa;;IAAA,iDAoYY,MAAOE,GAAP,IAAwC;MAChElE,IAAI,CAAC,iCAAD,CAAJ;MACA,OAAOb,OAAO,CAACgF,uBAAR,CAAgCD,GAAhC,CAAP;IACD,CAvYa;;IAAA,0CA8YK,eAOyB;MAAA,IAPlB;QACxBE,kBADwB;QAExBC,IAAI,GAAG,SAFiB;QAGxBjC,eAAe,GAAG,KAHM;QAIxBC,uBAAuB,GAAG,GAJF;QAKxBC,iBALwB;QAMxBC,gBAAgB,GAAG;MANK,CAOkB;MAC1CvC,IAAI,CAAC,0BAAD,CAAJ;;MACA,IAAI,CAAC,KAAK8B,YAAV,EAAwB;QAEtB,KAAKA,YAAL,GAAoB,IAApB;QACA,KAAKU,gBAAL,GAAwB,KAAxB;;QAEA,IAAIF,iBAAJ,EAAuB;UACrBtC,IAAI,CAAC,0CAAD,CAAJ;UACA,KAAKyC,qBAAL,CAA2BH,iBAA3B;QACD;;QAEDtC,IAAI,CAAC,wCAAD,CAAJ,CAVsB,CAWtB;;QACA,KAAK0C,mBAAL,CAAyBH,gBAAzB;QAEAvC,IAAI,CAAC,qCAAD,CAAJ;QACA,OAAOb,OAAO,CAACmF,gBAAR,CACLF,kBADK,EAELC,IAFK,EAGLjC,eAHK,EAILC,uBAJK,CAAP;MAMD;;MAED,OAAO,yCAAyC,KAAKG,gBAAL,GAAwB,qBAAxB,GAAgD,GAAzF,CAAP;IACD,CA/aa;;IAAA,0CAqbM,YAA6B;MAC/CxC,IAAI,CAAC,0BAAD,CAAJ;MACAA,IAAI,CAAC,iBAAD,EAAoB,KAAK8B,YAAzB,CAAJ;MACA9B,IAAI,CAAC,cAAD,EAAiB,KAAK8B,YAAtB,CAAJ;;MACA,IAAI,KAAKA,YAAL,IAAqB,CAAC,KAAKU,gBAA/B,EAAiD;QAC/C,KAAKA,gBAAL,GAAwB,IAAxB;QACAxC,IAAI,CAAC,qCAAD,CAAJ;QACA,OAAOb,OAAO,CAACoF,gBAAR,EAAP;MACD;;MAED,OAAO,wBAAwB,CAAC,KAAKzC,YAAN,GAAqB,oBAArB,GAA4C,iBAApE,CAAP;IACD,CAhca;;IAAA,2CAscM,YAA6B;MAC/C9B,IAAI,CAAC,2BAAD,CAAJ;;MACA,IAAI,KAAK8B,YAAL,IAAqB,KAAKU,gBAA9B,EAAgD;QAC9C,KAAKA,gBAAL,GAAwB,KAAxB;QACAxC,IAAI,CAAC,sCAAD,CAAJ;QACA,OAAOb,OAAO,CAACqF,iBAAR,EAAP;MACD;;MAED,OAAO,yBAAyB,CAAC,KAAK1C,YAAN,GAAqB,oBAArB,GAA4C,iBAArE,CAAP;IACD,CA/ca;;IAAA,yCAqdI,YAA6B;MAC7C9B,IAAI,CAAC,yBAAD,CAAJ;;MACA,IAAI,KAAK8B,YAAT,EAAuB;QAErB,KAAKA,YAAL,GAAoB,KAApB;QACA,KAAKU,gBAAL,GAAwB,KAAxB;QAEAxC,IAAI,CAAC,6CAAD,CAAJ;QACA,KAAK4B,wBAAL;QAEA5B,IAAI,CAAC,2CAAD,CAAJ;QACA,KAAK6B,sBAAL;QAEA7B,IAAI,CAAC,oCAAD,CAAJ;QACA,MAAMyE,GAAG,GAAGtF,OAAO,CAACuF,eAAR,EAAZ;QACA,OAAOD,GAAP;MACD;;MAED,OAAO,oEAAP;IACD,CAxea;;IAAA,kCA6eH,OAAOE,CAAP,EAAkBC,CAAlB,KAAiD;MAC1D,OAAOzF,OAAO,CAAC0F,QAAR,CAAiBF,CAAjB,EAAoBC,CAApB,CAAP;IACD,CA/ea;;IACZ,KAAK9C,YAAL,GAAoB,KAApB;IACA,KAAK6B,UAAL,GAAkB,KAAlB;IACA,KAAKC,UAAL,GAAkB,KAAlB;IACA,KAAKpB,gBAAL,GAAwB,KAAxB;IACA,KAAKnB,qBAAL,GAA6B,IAA7B;IACA,KAAKmC,mBAAL,GAA2B,IAA3B;IACA,KAAKzB,qBAAL,GAA6B,IAA7B;IACA,KAAKE,eAAL,GAAuB,IAAvB;EACD;;AApBgB"}